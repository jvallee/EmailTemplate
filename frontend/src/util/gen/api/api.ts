/* tslint:disable */
/* eslint-disable */
/**
 * Back End API
 * Dover Onsite Coding Challenge Backend
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: coding-challenge@dover.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Candidate
 */
export interface Candidate {
    /**
     * 
     * @type {string}
     * @memberof Candidate
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Candidate
     */
    years_experience: string;
    /**
     * 
     * @type {string}
     * @memberof Candidate
     */
    custom: string;
}
/**
 * 
 * @export
 * @interface Client
 */
export interface Client {
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    id?: number;
    /**
     * 
     * @type {Array<Job>}
     * @memberof Client
     */
    jobs?: Array<Job> | null;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    name: string;
}
/**
 * 
 * @export
 * @interface Job
 */
export interface Job {
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    id?: number;
    /**
     * 
     * @type {Array<Outreach>}
     * @memberof Job
     */
    outreaches?: Array<Outreach> | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    modified?: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    template: string;
    /**
     * 
     * @type {boolean}
     * @memberof Job
     */
    has_draft?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    template_draft?: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    subject?: string;
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    poster: number;
}
/**
 * 
 * @export
 * @interface Outreach
 */
export interface Outreach {
    /**
     * 
     * @type {number}
     * @memberof Outreach
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Outreach
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof Outreach
     */
    modified?: string;
    /**
     * 
     * @type {string}
     * @memberof Outreach
     */
    state?: OutreachStateEnum;
    /**
     * 
     * @type {any}
     * @memberof Outreach
     */
    editor_state?: any | null;
    /**
     * 
     * @type {number}
     * @memberof Outreach
     */
    job: number;
}

/**
    * @export
    * @enum {string}
    */
export enum OutreachStateEnum {
    Draft = 'DRAFT',
    Finalized = 'FINALIZED'
}

/**
 * 
 * @export
 * @interface Todo
 */
export interface Todo {
    /**
     * 
     * @type {number}
     * @memberof Todo
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Todo
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Todo
     */
    description: string;
    /**
     * 
     * @type {boolean}
     * @memberof Todo
     */
    completed?: boolean;
}

/**
 * CandidatesApi - axios parameter creator
 * @export
 */
export const CandidatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Candidate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidatesCreate: async (data: Candidate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('candidatesCreate', 'data', data)
            const localVarPath = `/candidates/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this candidate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidatesDelete: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('candidatesDelete', 'id', id)
            const localVarPath = `/candidates/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidatesList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/candidates/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this candidate.
         * @param {Candidate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidatesPartialUpdate: async (id: number, data: Candidate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('candidatesPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('candidatesPartialUpdate', 'data', data)
            const localVarPath = `/candidates/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this candidate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidatesRead: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('candidatesRead', 'id', id)
            const localVarPath = `/candidates/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this candidate.
         * @param {Candidate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidatesUpdate: async (id: number, data: Candidate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('candidatesUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('candidatesUpdate', 'data', data)
            const localVarPath = `/candidates/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CandidatesApi - functional programming interface
 * @export
 */
export const CandidatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CandidatesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Candidate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async candidatesCreate(data: Candidate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Candidate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.candidatesCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this candidate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async candidatesDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.candidatesDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async candidatesList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Candidate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.candidatesList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this candidate.
         * @param {Candidate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async candidatesPartialUpdate(id: number, data: Candidate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Candidate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.candidatesPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this candidate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async candidatesRead(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Candidate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.candidatesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this candidate.
         * @param {Candidate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async candidatesUpdate(id: number, data: Candidate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Candidate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.candidatesUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CandidatesApi - factory interface
 * @export
 */
export const CandidatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CandidatesApiFp(configuration)
    return {
        /**
         * 
         * @param {Candidate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidatesCreate(data: Candidate, options?: any): AxiosPromise<Candidate> {
            return localVarFp.candidatesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this candidate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidatesDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.candidatesDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidatesList(options?: any): AxiosPromise<Array<Candidate>> {
            return localVarFp.candidatesList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this candidate.
         * @param {Candidate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidatesPartialUpdate(id: number, data: Candidate, options?: any): AxiosPromise<Candidate> {
            return localVarFp.candidatesPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this candidate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidatesRead(id: number, options?: any): AxiosPromise<Candidate> {
            return localVarFp.candidatesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this candidate.
         * @param {Candidate} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidatesUpdate(id: number, data: Candidate, options?: any): AxiosPromise<Candidate> {
            return localVarFp.candidatesUpdate(id, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CandidatesApi - object-oriented interface
 * @export
 * @class CandidatesApi
 * @extends {BaseAPI}
 */
export class CandidatesApi extends BaseAPI {
    /**
     * 
     * @param {Candidate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidatesApi
     */
    public candidatesCreate(data: Candidate, options?: any) {
        return CandidatesApiFp(this.configuration).candidatesCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this candidate.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidatesApi
     */
    public candidatesDelete(id: number, options?: any) {
        return CandidatesApiFp(this.configuration).candidatesDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidatesApi
     */
    public candidatesList(options?: any) {
        return CandidatesApiFp(this.configuration).candidatesList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this candidate.
     * @param {Candidate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidatesApi
     */
    public candidatesPartialUpdate(id: number, data: Candidate, options?: any) {
        return CandidatesApiFp(this.configuration).candidatesPartialUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this candidate.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidatesApi
     */
    public candidatesRead(id: number, options?: any) {
        return CandidatesApiFp(this.configuration).candidatesRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this candidate.
     * @param {Candidate} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidatesApi
     */
    public candidatesUpdate(id: number, data: Candidate, options?: any) {
        return CandidatesApiFp(this.configuration).candidatesUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ClientsApi - axios parameter creator
 * @export
 */
export const ClientsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id A unique integer value identifying this client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsDelete: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('clientsDelete', 'id', id)
            const localVarPath = `/clients/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientsApi - functional programming interface
 * @export
 */
export const ClientsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClientsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id A unique integer value identifying this client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClientsApi - factory interface
 * @export
 */
export const ClientsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClientsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id A unique integer value identifying this client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.clientsDelete(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClientsApi - object-oriented interface
 * @export
 * @class ClientsApi
 * @extends {BaseAPI}
 */
export class ClientsApi extends BaseAPI {
    /**
     * 
     * @param {number} id A unique integer value identifying this client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsApi
     */
    public clientsDelete(id: number, options?: any) {
        return ClientsApiFp(this.configuration).clientsDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * JobsApi - axios parameter creator
 * @export
 */
export const JobsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id A unique integer value identifying this job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsDelete: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsDelete', 'id', id)
            const localVarPath = `/jobs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobsApi - functional programming interface
 * @export
 */
export const JobsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id A unique integer value identifying this job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobsApi - factory interface
 * @export
 */
export const JobsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id A unique integer value identifying this job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.jobsDelete(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobsApi - object-oriented interface
 * @export
 * @class JobsApi
 * @extends {BaseAPI}
 */
export class JobsApi extends BaseAPI {
    /**
     * 
     * @param {number} id A unique integer value identifying this job.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public jobsDelete(id: number, options?: any) {
        return JobsApiFp(this.configuration).jobsDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OutreachesApi - axios parameter creator
 * @export
 */
export const OutreachesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id A unique integer value identifying this outreach.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outreachesDelete: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('outreachesDelete', 'id', id)
            const localVarPath = `/outreaches/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OutreachesApi - functional programming interface
 * @export
 */
export const OutreachesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OutreachesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id A unique integer value identifying this outreach.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async outreachesDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.outreachesDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OutreachesApi - factory interface
 * @export
 */
export const OutreachesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OutreachesApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id A unique integer value identifying this outreach.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outreachesDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.outreachesDelete(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OutreachesApi - object-oriented interface
 * @export
 * @class OutreachesApi
 * @extends {BaseAPI}
 */
export class OutreachesApi extends BaseAPI {
    /**
     * 
     * @param {number} id A unique integer value identifying this outreach.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutreachesApi
     */
    public outreachesDelete(id: number, options?: any) {
        return OutreachesApiFp(this.configuration).outreachesDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SchemaApi - axios parameter creator
 * @export
 */
export const SchemaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @summary OpenApi3 schema for this API. Format can be selected via content negotiation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schemaList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/schema/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schemaRedocList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/schema/redoc/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schemaSwaggerUiList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/schema/swagger-ui/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchemaApi - functional programming interface
 * @export
 */
export const SchemaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchemaApiAxiosParamCreator(configuration)
    return {
        /**
         * - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @summary OpenApi3 schema for this API. Format can be selected via content negotiation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schemaList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schemaList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schemaRedocList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schemaRedocList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schemaSwaggerUiList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schemaSwaggerUiList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SchemaApi - factory interface
 * @export
 */
export const SchemaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchemaApiFp(configuration)
    return {
        /**
         * - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @summary OpenApi3 schema for this API. Format can be selected via content negotiation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schemaList(options?: any): AxiosPromise<void> {
            return localVarFp.schemaList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schemaRedocList(options?: any): AxiosPromise<void> {
            return localVarFp.schemaRedocList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schemaSwaggerUiList(options?: any): AxiosPromise<void> {
            return localVarFp.schemaSwaggerUiList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SchemaApi - object-oriented interface
 * @export
 * @class SchemaApi
 * @extends {BaseAPI}
 */
export class SchemaApi extends BaseAPI {
    /**
     * - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @summary OpenApi3 schema for this API. Format can be selected via content negotiation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    public schemaList(options?: any) {
        return SchemaApiFp(this.configuration).schemaList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    public schemaRedocList(options?: any) {
        return SchemaApiFp(this.configuration).schemaRedocList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    public schemaSwaggerUiList(options?: any) {
        return SchemaApiFp(this.configuration).schemaSwaggerUiList(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TodosApi - axios parameter creator
 * @export
 */
export const TodosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Todo} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosCreate: async (data: Todo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('todosCreate', 'data', data)
            const localVarPath = `/todos/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this todo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosDelete: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('todosDelete', 'id', id)
            const localVarPath = `/todos/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/todos/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this todo.
         * @param {Todo} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosPartialUpdate: async (id: number, data: Todo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('todosPartialUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('todosPartialUpdate', 'data', data)
            const localVarPath = `/todos/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this todo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosRead: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('todosRead', 'id', id)
            const localVarPath = `/todos/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this todo.
         * @param {Todo} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosUpdate: async (id: number, data: Todo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('todosUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('todosUpdate', 'data', data)
            const localVarPath = `/todos/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TodosApi - functional programming interface
 * @export
 */
export const TodosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TodosApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Todo} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todosCreate(data: Todo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todosCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this todo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todosDelete(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todosDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todosList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Todo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todosList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this todo.
         * @param {Todo} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todosPartialUpdate(id: number, data: Todo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todosPartialUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this todo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todosRead(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todosRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this todo.
         * @param {Todo} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todosUpdate(id: number, data: Todo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todosUpdate(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TodosApi - factory interface
 * @export
 */
export const TodosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TodosApiFp(configuration)
    return {
        /**
         * 
         * @param {Todo} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosCreate(data: Todo, options?: any): AxiosPromise<Todo> {
            return localVarFp.todosCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this todo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.todosDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosList(options?: any): AxiosPromise<Array<Todo>> {
            return localVarFp.todosList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this todo.
         * @param {Todo} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosPartialUpdate(id: number, data: Todo, options?: any): AxiosPromise<Todo> {
            return localVarFp.todosPartialUpdate(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this todo.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosRead(id: number, options?: any): AxiosPromise<Todo> {
            return localVarFp.todosRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this todo.
         * @param {Todo} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosUpdate(id: number, data: Todo, options?: any): AxiosPromise<Todo> {
            return localVarFp.todosUpdate(id, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TodosApi - object-oriented interface
 * @export
 * @class TodosApi
 * @extends {BaseAPI}
 */
export class TodosApi extends BaseAPI {
    /**
     * 
     * @param {Todo} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public todosCreate(data: Todo, options?: any) {
        return TodosApiFp(this.configuration).todosCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this todo.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public todosDelete(id: number, options?: any) {
        return TodosApiFp(this.configuration).todosDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public todosList(options?: any) {
        return TodosApiFp(this.configuration).todosList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this todo.
     * @param {Todo} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public todosPartialUpdate(id: number, data: Todo, options?: any) {
        return TodosApiFp(this.configuration).todosPartialUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this todo.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public todosRead(id: number, options?: any) {
        return TodosApiFp(this.configuration).todosRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this todo.
     * @param {Todo} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodosApi
     */
    public todosUpdate(id: number, data: Todo, options?: any) {
        return TodosApiFp(this.configuration).todosUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ValleeBackendApi - axios parameter creator
 * @export
 */
export const ValleeBackendApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Client} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClient: async (data: Client, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('createClient', 'data', data)
            const localVarPath = `/clients/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Job} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJob: async (data: Job, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('createJob', 'data', data)
            const localVarPath = `/jobs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Outreach} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutreach: async (data: Outreach, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('createOutreach', 'data', data)
            const localVarPath = `/outreaches/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getClient', 'id', id)
            const localVarPath = `/clients/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJob: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getJob', 'id', id)
            const localVarPath = `/jobs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this outreach.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutreach: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOutreach', 'id', id)
            const localVarPath = `/outreaches/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsOutreachList: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobsOutreachList', 'id', id)
            const localVarPath = `/jobs/{id}/outreach_list/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listClient: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/clients/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJob: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/jobs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOutreach: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/outreaches/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this client.
         * @param {Client} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateClient: async (id: number, data: Client, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateClient', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('partialUpdateClient', 'data', data)
            const localVarPath = `/clients/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this job.
         * @param {Job} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateJob: async (id: number, data: Job, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateJob', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('partialUpdateJob', 'data', data)
            const localVarPath = `/jobs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this outreach.
         * @param {Outreach} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateOutreach: async (id: number, data: Outreach, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdateOutreach', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('partialUpdateOutreach', 'data', data)
            const localVarPath = `/outreaches/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this client.
         * @param {Client} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClient: async (id: number, data: Client, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateClient', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('updateClient', 'data', data)
            const localVarPath = `/clients/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this job.
         * @param {Job} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateJob: async (id: number, data: Job, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateJob', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('updateJob', 'data', data)
            const localVarPath = `/jobs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this outreach.
         * @param {Outreach} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOutreach: async (id: number, data: Outreach, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateOutreach', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('updateOutreach', 'data', data)
            const localVarPath = `/outreaches/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ValleeBackendApi - functional programming interface
 * @export
 */
export const ValleeBackendApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ValleeBackendApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Client} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createClient(data: Client, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createClient(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Job} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createJob(data: Job, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createJob(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Outreach} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOutreach(data: Outreach, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Outreach>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOutreach(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClient(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClient(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJob(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJob(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this outreach.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOutreach(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Outreach>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOutreach(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsOutreachList(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Outreach>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobsOutreachList(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listClient(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Client>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listClient(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listJob(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Job>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listJob(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOutreach(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Outreach>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOutreach(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this client.
         * @param {Client} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateClient(id: number, data: Client, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateClient(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this job.
         * @param {Job} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateJob(id: number, data: Job, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateJob(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this outreach.
         * @param {Outreach} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateOutreach(id: number, data: Outreach, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Outreach>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateOutreach(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this client.
         * @param {Client} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClient(id: number, data: Client, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClient(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this job.
         * @param {Job} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateJob(id: number, data: Job, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateJob(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this outreach.
         * @param {Outreach} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOutreach(id: number, data: Outreach, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Outreach>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOutreach(id, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ValleeBackendApi - factory interface
 * @export
 */
export const ValleeBackendApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ValleeBackendApiFp(configuration)
    return {
        /**
         * 
         * @param {Client} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClient(data: Client, options?: any): AxiosPromise<Client> {
            return localVarFp.createClient(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Job} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJob(data: Job, options?: any): AxiosPromise<Job> {
            return localVarFp.createJob(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Outreach} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutreach(data: Outreach, options?: any): AxiosPromise<Outreach> {
            return localVarFp.createOutreach(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this client.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient(id: number, options?: any): AxiosPromise<Client> {
            return localVarFp.getClient(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJob(id: number, options?: any): AxiosPromise<Job> {
            return localVarFp.getJob(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this outreach.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutreach(id: number, options?: any): AxiosPromise<Outreach> {
            return localVarFp.getOutreach(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsOutreachList(id: number, options?: any): AxiosPromise<Array<Outreach>> {
            return localVarFp.jobsOutreachList(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listClient(options?: any): AxiosPromise<Array<Client>> {
            return localVarFp.listClient(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJob(options?: any): AxiosPromise<Array<Job>> {
            return localVarFp.listJob(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOutreach(options?: any): AxiosPromise<Array<Outreach>> {
            return localVarFp.listOutreach(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this client.
         * @param {Client} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateClient(id: number, data: Client, options?: any): AxiosPromise<Client> {
            return localVarFp.partialUpdateClient(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this job.
         * @param {Job} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateJob(id: number, data: Job, options?: any): AxiosPromise<Job> {
            return localVarFp.partialUpdateJob(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this outreach.
         * @param {Outreach} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateOutreach(id: number, data: Outreach, options?: any): AxiosPromise<Outreach> {
            return localVarFp.partialUpdateOutreach(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this client.
         * @param {Client} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClient(id: number, data: Client, options?: any): AxiosPromise<Client> {
            return localVarFp.updateClient(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this job.
         * @param {Job} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateJob(id: number, data: Job, options?: any): AxiosPromise<Job> {
            return localVarFp.updateJob(id, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this outreach.
         * @param {Outreach} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOutreach(id: number, data: Outreach, options?: any): AxiosPromise<Outreach> {
            return localVarFp.updateOutreach(id, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ValleeBackendApi - object-oriented interface
 * @export
 * @class ValleeBackendApi
 * @extends {BaseAPI}
 */
export class ValleeBackendApi extends BaseAPI {
    /**
     * 
     * @param {Client} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValleeBackendApi
     */
    public createClient(data: Client, options?: any) {
        return ValleeBackendApiFp(this.configuration).createClient(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Job} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValleeBackendApi
     */
    public createJob(data: Job, options?: any) {
        return ValleeBackendApiFp(this.configuration).createJob(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Outreach} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValleeBackendApi
     */
    public createOutreach(data: Outreach, options?: any) {
        return ValleeBackendApiFp(this.configuration).createOutreach(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this client.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValleeBackendApi
     */
    public getClient(id: number, options?: any) {
        return ValleeBackendApiFp(this.configuration).getClient(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this job.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValleeBackendApi
     */
    public getJob(id: number, options?: any) {
        return ValleeBackendApiFp(this.configuration).getJob(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this outreach.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValleeBackendApi
     */
    public getOutreach(id: number, options?: any) {
        return ValleeBackendApiFp(this.configuration).getOutreach(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this job.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValleeBackendApi
     */
    public jobsOutreachList(id: number, options?: any) {
        return ValleeBackendApiFp(this.configuration).jobsOutreachList(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValleeBackendApi
     */
    public listClient(options?: any) {
        return ValleeBackendApiFp(this.configuration).listClient(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValleeBackendApi
     */
    public listJob(options?: any) {
        return ValleeBackendApiFp(this.configuration).listJob(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValleeBackendApi
     */
    public listOutreach(options?: any) {
        return ValleeBackendApiFp(this.configuration).listOutreach(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this client.
     * @param {Client} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValleeBackendApi
     */
    public partialUpdateClient(id: number, data: Client, options?: any) {
        return ValleeBackendApiFp(this.configuration).partialUpdateClient(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this job.
     * @param {Job} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValleeBackendApi
     */
    public partialUpdateJob(id: number, data: Job, options?: any) {
        return ValleeBackendApiFp(this.configuration).partialUpdateJob(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this outreach.
     * @param {Outreach} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValleeBackendApi
     */
    public partialUpdateOutreach(id: number, data: Outreach, options?: any) {
        return ValleeBackendApiFp(this.configuration).partialUpdateOutreach(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this client.
     * @param {Client} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValleeBackendApi
     */
    public updateClient(id: number, data: Client, options?: any) {
        return ValleeBackendApiFp(this.configuration).updateClient(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this job.
     * @param {Job} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValleeBackendApi
     */
    public updateJob(id: number, data: Job, options?: any) {
        return ValleeBackendApiFp(this.configuration).updateJob(id, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this outreach.
     * @param {Outreach} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValleeBackendApi
     */
    public updateOutreach(id: number, data: Outreach, options?: any) {
        return ValleeBackendApiFp(this.configuration).updateOutreach(id, data, options).then((request) => request(this.axios, this.basePath));
    }
}


