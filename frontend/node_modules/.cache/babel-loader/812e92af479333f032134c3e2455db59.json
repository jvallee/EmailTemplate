{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/components/pages/OutReachEditor/OutReachEditor.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer, useState } from \"react\";\n// import { Editor, EditorState } from \"draft-js\";\nimport { convertToRaw, EditorState, ContentState } from \"draft-js\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport \"draft-js/dist/Draft.css\";\nimport \"./OutReachEditor.css\";\nimport { useParams } from \"react-router\";\nimport reducer from \"./OutReachEditorReducer\";\n\nconst OutReachEditorPage = props => {\n  _s();\n\n  var _job$template;\n\n  const {\n    apiService\n  } = props;\n  const [job, setJob] = useState();\n  const id = useParams().id;\n  const [state, dispatch] = useReducer(reducer, {\n    job: job,\n    editorState: EditorState.createWithContent(ContentState.createFromText((_job$template = job === null || job === void 0 ? void 0 : job.template) !== null && _job$template !== void 0 ? _job$template : \"job null\")),\n    isDirty: false\n  });\n  useEffect(() => {\n    apiService === null || apiService === void 0 ? void 0 : apiService.apiJobsRetrieve(parseInt(id)).then(value => {\n      var _value$data$template;\n\n      setJob(value.data);\n      var initialContentState = ContentState.createFromText((_value$data$template = value.data.template) !== null && _value$data$template !== void 0 ? _value$data$template : \"\");\n      var initialEditorState = EditorState.createWithContent(initialContentState);\n      debugger; // setEditorState(initialEditorState);\n\n      dispatch({\n        type: \"EDITOR_LOADED_200\",\n        payload: initialEditorState\n      });\n    });\n  }, []);\n  useEffect(() => {\n    var _state$editorState;\n\n    debugger;\n\n    if (state.isDirty === true && ((_state$editorState = state.editorState) === null || _state$editorState === void 0 ? void 0 : _state$editorState.getCurrentContent()) != undefined) {\n      var _state$editorState2;\n\n      const blocks = convertToRaw((_state$editorState2 = state.editorState) === null || _state$editorState2 === void 0 ? void 0 : _state$editorState2.getCurrentContent()).blocks;\n      const value = blocks.map(block => !block.text.trim() && \"\\n\" || block.text).join(\"\\n\");\n\n      if ((job === null || job === void 0 ? void 0 : job.template) !== value) {\n        var _job$id;\n\n        apiService === null || apiService === void 0 ? void 0 : apiService.apiJobsUpdate((_job$id = job === null || job === void 0 ? void 0 : job.id) !== null && _job$id !== void 0 ? _job$id : -1, { ...job,\n          template: value\n        }).then(value => {\n          debugger; // type: \"EDITOR_ON_CHANGE\", payload: draftContent\n\n          dispatch({\n            type: \"EDITOR_POSTED\"\n          });\n        });\n      } else {\n        dispatch({\n          type: \"EDITOR_POSTED\"\n        });\n      }\n    }\n  }, [state.isDirty]); // const initialContentState = ContentState.createFromText(job?.name ?? \"\");\n  // const initialEditorState = EditorState.createWithContent(initialContentState);\n  // const [editorState, setEditorState] = React.useState(\n  //   EditorState.createEmpty()\n  // );\n  // const temp = new EditorState(\"hello there\");\n\n  const onEditorStateChange = editorState => {\n    // setEditorState(editorState);\n    dispatch({\n      type: \"EDITOR_EDITED_200\",\n      payload: editorState\n    });\n  };\n\n  const onChange = draftContent => {\n    debugger;\n    dispatch({\n      type: \"EDITOR_ON_CHANGE\",\n      payload: draftContent\n    });\n  }; //\n  // useEffect(() => {\n  //   apiService?.apiJobsRetrieve(parseInt(id)).then((value) => {\n  //     debugger;\n  //     convertToRaw(editorState.getCurrentContent());\n  //     setJob(value.data);\n  //   });\n  // }, []);\n\n  /* init in useState boo!*/\n\n\n  const init = ContentState.createFromText(\"plain text\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Draft for \" + (job === null || job === void 0 ? void 0 : job.name)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Save Template\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Editor, {\n      initialContentState: convertToRaw(init) //convertToRaw(state.editorState)}\n      // initialContentState={initialContentState}\n      ,\n      editorState: state.editorState,\n      onEditorStateChange: onEditorStateChange,\n      spellCheck: true,\n      wrapperClassName: \"demo-wrapper\",\n      editorClassName: \"demo-editor\" // onChange={onChange}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n\n_s(OutReachEditorPage, \"f16caysAYmVIPef8oQ2AOGAKg1A=\", false, function () {\n  return [useParams];\n});\n\n_c = OutReachEditorPage;\nexport default OutReachEditorPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"OutReachEditorPage\");","map":{"version":3,"sources":["/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/components/pages/OutReachEditor/OutReachEditor.tsx"],"names":["React","useEffect","useReducer","useState","convertToRaw","EditorState","ContentState","Editor","useParams","reducer","OutReachEditorPage","props","apiService","job","setJob","id","state","dispatch","editorState","createWithContent","createFromText","template","isDirty","apiJobsRetrieve","parseInt","then","value","data","initialContentState","initialEditorState","type","payload","getCurrentContent","undefined","blocks","map","block","text","trim","join","apiJobsUpdate","onEditorStateChange","onChange","draftContent","init","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useReducer, useState } from \"react\";\nimport { ApiApi, Job } from \"../../../util/gen/api/dist\";\n// import { Editor, EditorState } from \"draft-js\";\nimport { convertToRaw, EditorState, ContentState } from \"draft-js\";\nimport { Editor, RawDraftContentState } from \"react-draft-wysiwyg\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n\nimport \"draft-js/dist/Draft.css\";\nimport \"./OutReachEditor.css\";\nimport JobCell from \"../../common/JobCell/JobCell\";\nimport { RouteComponentProps, useParams } from \"react-router\";\nimport reducer, { OutReachEditorReducerState } from \"./OutReachEditorReducer\";\nimport AllJobsPage from \"../Jobs/allJobs\";\n\ntype OutReachEditorProps = {\n  setQueryInfo?: Function;\n  apiService?: ApiApi;\n};\n\ninterface IUserPublicProfileRouteParams {\n  id: string;\n}\n\nconst OutReachEditorPage: React.FC<OutReachEditorProps> = (props) => {\n  const { apiService } = props;\n  const [job, setJob] = useState<Job>();\n  const id = useParams<IUserPublicProfileRouteParams>().id;\n\n  const [state, dispatch] = useReducer(reducer, {\n    job: job,\n    editorState: EditorState.createWithContent(\n      ContentState.createFromText(job?.template ?? \"job null\")\n    ),\n    isDirty: false,\n  } as OutReachEditorReducerState);\n\n  useEffect(() => {\n    apiService?.apiJobsRetrieve(parseInt(id)).then((value) => {\n      setJob(value.data);\n      var initialContentState = ContentState.createFromText(\n        value.data.template ?? \"\"\n      );\n      var initialEditorState = EditorState.createWithContent(\n        initialContentState\n      );\n      debugger;\n      // setEditorState(initialEditorState);\n      dispatch({ type: \"EDITOR_LOADED_200\", payload: initialEditorState });\n    });\n  }, []);\n\n  useEffect(() => {\n    debugger;\n    if (\n      state.isDirty === true &&\n      state.editorState?.getCurrentContent() != undefined\n    ) {\n      const blocks = convertToRaw(state.editorState?.getCurrentContent())\n        .blocks;\n      const value = blocks\n        .map((block) => (!block.text.trim() && \"\\n\") || block.text)\n        .join(\"\\n\");\n      if (job?.template !== value) {\n        apiService\n          ?.apiJobsUpdate(job?.id ?? -1, {\n            ...job,\n            template: value,\n          } as Job)\n          .then((value) => {\n            debugger;\n            // type: \"EDITOR_ON_CHANGE\", payload: draftContent\n            dispatch({ type: \"EDITOR_POSTED\" });\n          });\n      } else {\n        dispatch({ type: \"EDITOR_POSTED\" });\n      }\n    }\n  }, [state.isDirty]);\n\n  // const initialContentState = ContentState.createFromText(job?.name ?? \"\");\n  // const initialEditorState = EditorState.createWithContent(initialContentState);\n\n  // const [editorState, setEditorState] = React.useState(\n  //   EditorState.createEmpty()\n  // );\n\n  // const temp = new EditorState(\"hello there\");\n  const onEditorStateChange = (editorState: EditorState) => {\n    // setEditorState(editorState);\n    dispatch({ type: \"EDITOR_EDITED_200\", payload: editorState });\n  };\n  const onChange = (draftContent: RawDraftContentState) => {\n    debugger;\n    dispatch({ type: \"EDITOR_ON_CHANGE\", payload: draftContent });\n  };\n\n  //\n\n  // useEffect(() => {\n  //   apiService?.apiJobsRetrieve(parseInt(id)).then((value) => {\n  //     debugger;\n  //     convertToRaw(editorState.getCurrentContent());\n  //     setJob(value.data);\n  //   });\n  // }, []);\n\n  /* init in useState boo!*/\n\n  const init = ContentState.createFromText(\"plain text\");\n\n  return (\n    <div>\n      <div>\n        <h2>{\"Draft for \" + job?.name}</h2>\n        <button>Save Template</button>\n      </div>\n      <Editor\n        initialContentState={convertToRaw(init)} //convertToRaw(state.editorState)}\n        // initialContentState={initialContentState}\n        editorState={state.editorState}\n        onEditorStateChange={onEditorStateChange}\n        spellCheck={true}\n        wrapperClassName=\"demo-wrapper\"\n        editorClassName=\"demo-editor\"\n        // onChange={onChange}\n      />\n    </div>\n  );\n};\n\nexport default OutReachEditorPage;\n"]},"metadata":{},"sourceType":"module"}