{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/components/pages/OutReachEditor/OutReachEditor.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer } from \"react\";\nimport { convertToRaw, EditorState, ContentState } from \"draft-js\";\nimport { Editor } from \"react-draft-wysiwyg\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport \"draft-js/dist/Draft.css\";\nimport \"./OutReachEditor.css\";\nimport { useParams } from \"react-router\";\nimport reducer from \"./OutReachEditorReducer\";\nimport { stringToEditorState, getEditorContentAsString } from \"../../../util/HelperFunctions/TextEditorHelpers\";\nimport Modal from \"./Modal/Modal\";\n\nconst OutReachEditorPage = props => {\n  _s();\n\n  var _state$job3, _state$job$template2, _state$job4;\n\n  const {\n    apiService\n  } = props;\n  const id = parseInt(useParams().id);\n  const [state, dispatch] = useReducer(reducer, {\n    job: undefined,\n    editorState: EditorState.createWithContent(ContentState.createFromText(\"placeholder\")),\n    isDirty: false,\n    isModalOpen: false,\n    content: \"\"\n  });\n\n  const modalClickHelper = loadedContent => {\n    dispatch({\n      type: \"CLOSE_MODAL\",\n      payload: stringToEditorState(loadedContent)\n    });\n  };\n\n  const useDraftHandler = () => {\n    var _state$job$templateDr, _state$job;\n\n    modalClickHelper((_state$job$templateDr = (_state$job = state.job) === null || _state$job === void 0 ? void 0 : _state$job.templateDraft) !== null && _state$job$templateDr !== void 0 ? _state$job$templateDr : \"\");\n  };\n\n  const useSavedHandler = () => {\n    var _state$job$template, _state$job2;\n\n    modalClickHelper((_state$job$template = (_state$job2 = state.job) === null || _state$job2 === void 0 ? void 0 : _state$job2.template) !== null && _state$job$template !== void 0 ? _state$job$template : \"\");\n  };\n\n  useEffect(() => {\n    var _state$editorState;\n\n    if (state.job == undefined) {\n      loadDataIn(id, dispatch, apiService);\n    } else if (state.isDirty === true && ((_state$editorState = state.editorState) === null || _state$editorState === void 0 ? void 0 : _state$editorState.getCurrentContent()) != undefined) {\n      editorEditedHandler(id, state, dispatch, apiService);\n    }\n  }, [state.isDirty]);\n\n  const saveClickHandler = () => {\n    if (state.editorState != undefined) {\n      const value = getEditorContentAsString(state.editorState);\n      save(value);\n    }\n  };\n\n  const save = value => {\n    apiService === null || apiService === void 0 ? void 0 : apiService.apiJobsUpdate(id, { ...state.job,\n      template: value,\n      hasDraft: false,\n      templateDraft: value\n    }).then(value => {\n      debugger; // setJob(value.data);\n      // dispatch({ type: \"EDITOR_LOAD_JOB\", payload: value.data });\n\n      dispatch({\n        type: \"EDITOR_POSTED\",\n        payload: value.data\n      });\n    });\n  };\n\n  const onEditorStateChange = editorState => {\n    dispatch({\n      type: \"EDITOR_EDITED_200\",\n      payload: editorState\n    });\n  };\n\n  const init = ContentState.createFromText(\"plain text\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      clickSavedHandler: useSavedHandler,\n      clickDraftHandler: useDraftHandler,\n      isOpen: state.isModalOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Draft for \" + ((_state$job3 = state.job) === null || _state$job3 === void 0 ? void 0 : _state$job3.name)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveClickHandler,\n        disabled: ((_state$job$template2 = (_state$job4 = state.job) === null || _state$job4 === void 0 ? void 0 : _state$job4.template) !== null && _state$job$template2 !== void 0 ? _state$job$template2 : \"\") == state.content,\n        children: \"Save Template\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Editor, {\n      initialContentState: convertToRaw(init),\n      editorState: state.editorState,\n      onEditorStateChange: onEditorStateChange,\n      spellCheck: true,\n      wrapperClassName: \"demo-wrapper\",\n      editorClassName: \"demo-editor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n\n_s(OutReachEditorPage, \"Yi0PRFGquus/oZH5QCy59GvHcLg=\", false, function () {\n  return [useParams];\n});\n\n_c = OutReachEditorPage;\n\nconst loadDataIn = (id, dispatch, apiService) => {\n  apiService === null || apiService === void 0 ? void 0 : apiService.apiJobsRetrieve(id).then(value => {\n    dispatch({\n      type: \"EDITOR_LOAD_JOB\",\n      payload: value.data\n    });\n\n    if (value.data.hasDraft) {\n      dispatch({\n        type: \"OPEN_MODAL\"\n      });\n    } else {\n      var _value$data$template;\n\n      var initialEditorState = stringToEditorState((_value$data$template = value.data.template) !== null && _value$data$template !== void 0 ? _value$data$template : \"\");\n      dispatch({\n        type: \"EDITOR_LOADED_200\",\n        payload: initialEditorState\n      });\n    }\n  });\n};\n\nconst editorEditedHandler = (id, state, dispatch, apiService) => {\n  var _state$editorState2, _state$job5;\n\n  if (((_state$editorState2 = state.editorState) === null || _state$editorState2 === void 0 ? void 0 : _state$editorState2.getCurrentContent()) == undefined) {\n    console.error(\"should not be happening, editorState should be defined\");\n    return;\n  }\n\n  const editor_conent = getEditorContentAsString(state.editorState);\n\n  if (((_state$job5 = state.job) === null || _state$job5 === void 0 ? void 0 : _state$job5.templateDraft) !== editor_conent) {\n    debugger;\n    apiService === null || apiService === void 0 ? void 0 : apiService.apiJobsUpdate(id, { ...state.job,\n      templateDraft: editor_conent,\n      hasDraft: true\n    }).then(value => {\n      var _value$data;\n\n      debugger;\n      dispatch({\n        type: \"EDITOR_POSTED\",\n        payload: (_value$data = value.data) !== null && _value$data !== void 0 ? _value$data : \"\"\n      });\n    });\n  } else {\n    dispatch({\n      type: \"STYLES_CHANGE\"\n    });\n  }\n};\n\nexport default OutReachEditorPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"OutReachEditorPage\");","map":{"version":3,"sources":["/Users/jasonmichaelvallee/PycharmProjects/todo-react-django/frontend/src/components/pages/OutReachEditor/OutReachEditor.tsx"],"names":["React","useEffect","useReducer","convertToRaw","EditorState","ContentState","Editor","useParams","reducer","stringToEditorState","getEditorContentAsString","Modal","OutReachEditorPage","props","apiService","id","parseInt","state","dispatch","job","undefined","editorState","createWithContent","createFromText","isDirty","isModalOpen","content","modalClickHelper","loadedContent","type","payload","useDraftHandler","templateDraft","useSavedHandler","template","loadDataIn","getCurrentContent","editorEditedHandler","saveClickHandler","value","save","apiJobsUpdate","hasDraft","then","data","onEditorStateChange","init","name","apiJobsRetrieve","initialEditorState","console","error","editor_conent"],"mappings":"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","sourcesContent":["import React, { useEffect, useReducer, useState } from \"react\";\nimport { ApiApi, Job } from \"../../../util/gen/api/dist\";\nimport { convertToRaw, EditorState, ContentState } from \"draft-js\";\nimport { Editor, RawDraftContentState } from \"react-draft-wysiwyg\";\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport \"draft-js/dist/Draft.css\";\nimport \"./OutReachEditor.css\";\nimport { useParams } from \"react-router\";\nimport reducer, {\n  OutReachEditorActions,\n  OutReachEditorReducerState,\n} from \"./OutReachEditorReducer\";\nimport {\n  stringToEditorState,\n  getEditorContentAsString,\n} from \"../../../util/HelperFunctions/TextEditorHelpers\";\nimport Modal from \"./Modal/Modal\";\n\ntype OutReachEditorProps = {\n  setQueryInfo?: Function;\n  apiService?: ApiApi;\n};\n\ninterface IUserPublicProfileRouteParams {\n  id: string;\n}\n\nconst OutReachEditorPage: React.FC<OutReachEditorProps> = (props) => {\n  const { apiService } = props;\n  const id = parseInt(useParams<IUserPublicProfileRouteParams>().id);\n\n  const [state, dispatch] = useReducer(reducer, {\n    job: undefined,\n    editorState: EditorState.createWithContent(\n      ContentState.createFromText(\"placeholder\")\n    ),\n    isDirty: false,\n    isModalOpen: false,\n    content: \"\",\n  } as OutReachEditorReducerState);\n\n  const modalClickHelper = (loadedContent: string) => {\n    dispatch({\n      type: \"CLOSE_MODAL\",\n      payload: stringToEditorState(loadedContent),\n    });\n  };\n\n  const useDraftHandler = () => {\n    modalClickHelper(state.job?.templateDraft ?? \"\");\n  };\n\n  const useSavedHandler = () => {\n    modalClickHelper(state.job?.template ?? \"\");\n  };\n\n  useEffect(() => {\n    if (state.job == undefined) {\n      loadDataIn(id, dispatch, apiService);\n    } else if (\n      state.isDirty === true &&\n      state.editorState?.getCurrentContent() != undefined\n    ) {\n      editorEditedHandler(id, state, dispatch, apiService);\n    }\n  }, [state.isDirty]);\n\n  const saveClickHandler = () => {\n    if (state.editorState != undefined) {\n      const value = getEditorContentAsString(state.editorState);\n      save(value);\n    }\n  };\n\n  const save = (value: string) => {\n    apiService\n      ?.apiJobsUpdate(id, {\n        ...state.job,\n        template: value,\n        hasDraft: false,\n        templateDraft: value,\n      } as Job)\n      .then((value) => {\n        debugger;\n        // setJob(value.data);\n        // dispatch({ type: \"EDITOR_LOAD_JOB\", payload: value.data });\n        dispatch({ type: \"EDITOR_POSTED\", payload: value.data });\n      });\n  };\n\n  const onEditorStateChange = (editorState: EditorState) => {\n    dispatch({ type: \"EDITOR_EDITED_200\", payload: editorState });\n  };\n\n  const init = ContentState.createFromText(\"plain text\");\n\n  return (\n    <div>\n      <Modal\n        clickSavedHandler={useSavedHandler}\n        clickDraftHandler={useDraftHandler}\n        isOpen={state.isModalOpen}\n      />\n      <div>\n        <h2>{\"Draft for \" + state.job?.name}</h2>\n        <button\n          onClick={saveClickHandler}\n          disabled={(state.job?.template ?? \"\") == state.content}\n        >\n          Save Template\n        </button>\n      </div>\n      <Editor\n        initialContentState={convertToRaw(init)}\n        editorState={state.editorState}\n        onEditorStateChange={onEditorStateChange}\n        spellCheck={true}\n        wrapperClassName=\"demo-wrapper\"\n        editorClassName=\"demo-editor\"\n      />\n    </div>\n  );\n};\n\nconst loadDataIn = (\n  id: number,\n  dispatch: (value: OutReachEditorActions) => void,\n  apiService?: ApiApi\n) => {\n  apiService?.apiJobsRetrieve(id).then((value) => {\n    dispatch({ type: \"EDITOR_LOAD_JOB\", payload: value.data });\n    if (value.data.hasDraft) {\n      dispatch({ type: \"OPEN_MODAL\" });\n    } else {\n      var initialEditorState = stringToEditorState(value.data.template ?? \"\");\n      dispatch({ type: \"EDITOR_LOADED_200\", payload: initialEditorState });\n    }\n  });\n};\n\nconst editorEditedHandler = (\n  id: number,\n  state: OutReachEditorReducerState,\n  dispatch: (value: OutReachEditorActions) => void,\n  apiService?: ApiApi\n) => {\n  if (state.editorState?.getCurrentContent() == undefined) {\n    console.error(\"should not be happening, editorState should be defined\");\n    return;\n  }\n  const editor_conent = getEditorContentAsString(state.editorState);\n  if (state.job?.templateDraft !== editor_conent) {\n    debugger;\n    apiService\n      ?.apiJobsUpdate(id, {\n        ...state.job,\n        templateDraft: editor_conent,\n        hasDraft: true,\n      } as Job)\n      .then((value) => {\n        debugger;\n        dispatch({\n          type: \"EDITOR_POSTED\",\n          payload: value.data ?? \"\",\n        });\n      });\n  } else {\n    dispatch({ type: \"STYLES_CHANGE\" });\n  }\n};\n\nexport default OutReachEditorPage;\n"]},"metadata":{},"sourceType":"module"}