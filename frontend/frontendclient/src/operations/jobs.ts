/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BackEndAPI } from "../backEndAPI";
import {
  JobsListResponse,
  Job,
  JobsCreateResponse,
  JobsReadResponse,
  JobsUpdateResponse,
  JobsPartialUpdateResponse
} from "../models";

/**
 * Class representing a Jobs.
 */
export class Jobs {
  private readonly client: BackEndAPI;

  /**
   * Initialize a new instance of the class Jobs class.
   * @param client Reference to the service client
   */
  constructor(client: BackEndAPI) {
    this.client = client;
  }

  /**
   * @param options The options parameters.
   */
  list(options?: coreHttp.OperationOptions): Promise<JobsListResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<JobsListResponse>;
  }

  /**
   * @param data
   * @param options The options parameters.
   */
  create(
    data: Job | null,
    options?: coreHttp.OperationOptions
  ): Promise<JobsCreateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { data, options: operationOptions },
      createOperationSpec
    ) as Promise<JobsCreateResponse>;
  }

  /**
   * @param id A unique integer value identifying this job.
   * @param options The options parameters.
   */
  read(
    id: number,
    options?: coreHttp.OperationOptions
  ): Promise<JobsReadResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { id, options: operationOptions },
      readOperationSpec
    ) as Promise<JobsReadResponse>;
  }

  /**
   * @param id A unique integer value identifying this job.
   * @param data
   * @param options The options parameters.
   */
  update(
    id: number,
    data: Job | null,
    options?: coreHttp.OperationOptions
  ): Promise<JobsUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { id, data, options: operationOptions },
      updateOperationSpec
    ) as Promise<JobsUpdateResponse>;
  }

  /**
   * @param id A unique integer value identifying this job.
   * @param data
   * @param options The options parameters.
   */
  partialUpdate(
    id: number,
    data: Job | null,
    options?: coreHttp.OperationOptions
  ): Promise<JobsPartialUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { id, data, options: operationOptions },
      partialUpdateOperationSpec
    ) as Promise<JobsPartialUpdateResponse>;
  }

  /**
   * @param id A unique integer value identifying this job.
   * @param options The options parameters.
   */
  delete(
    id: number,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { id, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path: "/jobs/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Job" } }
        }
      }
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreHttp.OperationSpec = {
  path: "/jobs/",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.Job
    }
  },
  requestBody: Parameters.data2,
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept1],
  mediaType: "json",
  serializer
};
const readOperationSpec: coreHttp.OperationSpec = {
  path: "/jobs/{id}/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Job
    }
  },
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path: "/jobs/{id}/",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Job
    }
  },
  requestBody: Parameters.data2,
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.contentType, Parameters.accept1],
  mediaType: "json",
  serializer
};
const partialUpdateOperationSpec: coreHttp.OperationSpec = {
  path: "/jobs/{id}/",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Job
    }
  },
  requestBody: Parameters.data2,
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.contentType, Parameters.accept1],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/jobs/{id}/",
  httpMethod: "DELETE",
  responses: { 204: {} },
  urlParameters: [Parameters.$host, Parameters.id],
  serializer
};
