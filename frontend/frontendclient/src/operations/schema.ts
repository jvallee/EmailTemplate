/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BackEndAPI } from "../backEndAPI";

/**
 * Class representing a Schema.
 */
export class Schema {
  private readonly client: BackEndAPI;

  /**
   * Initialize a new instance of the class Schema class.
   * @param client Reference to the service client
   */
  constructor(client: BackEndAPI) {
    this.client = client;
  }

  /**
   * - YAML: application/vnd.oai.openapi
   * - JSON: application/vnd.oai.openapi+json
   * @param options The options parameters.
   */
  list(options?: coreHttp.OperationOptions): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * @param options The options parameters.
   */
  redocList(
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      redocListOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * @param options The options parameters.
   */
  swaggerUiList(
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      swaggerUiListOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listOperationSpec: coreHttp.OperationSpec = {
  path: "/schema/",
  httpMethod: "GET",
  responses: { 200: {} },
  urlParameters: [Parameters.$host],
  serializer
};
const redocListOperationSpec: coreHttp.OperationSpec = {
  path: "/schema/redoc/",
  httpMethod: "GET",
  responses: { 200: {} },
  urlParameters: [Parameters.$host],
  serializer
};
const swaggerUiListOperationSpec: coreHttp.OperationSpec = {
  path: "/schema/swagger-ui/",
  httpMethod: "GET",
  responses: { 200: {} },
  urlParameters: [Parameters.$host],
  serializer
};
